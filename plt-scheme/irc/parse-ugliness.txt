Eli suggests a way to improve parse.ss:


<offby1> the basic problem is: I have a simple hierarchy of structure types that represent
         different flavors of IRC message ...
<offby1> ... I parse an input line, and from it, create the appropriate flavor of message.
<offby1> but it'd be -way- easier, I think, if I always, at first, created the simplest type of
         message (i.e., the one at the top of the inheritance hierarchy), and then later
         examined it, and "upgraded" it to a more specific type, if that was the right thing to
         do.                                                                              [07:34]
<offby1> But as far as I know there's no way to "upgrade" an object.
<offby1> Since you seem to have spent a lot of time on Swindle, I assume you've encountered this
         problem, and know of a way to deal with it.                                      [07:35]
<lisppaste> offby1 annotated #46013 with "the structures" at
            http://paste.lisp.org/display/46013#1
<elibarzilay> Why not s/read-from-string/string->symbol/ ?                                [07:43]
<elibarzilay> offby1: also, you can use #f instead of making inspectors on every struct
              definition                                                                  [07:47]
<offby1> elibarzilay: about string->symbol, the answer is: because I'm an idiot
<offby1> yeah, I knew about #f                                                            [07:48]
<offby1> (make-inspector) is a bad habit.
<offby1> thanks for the free code review, by the way.
<elibarzilay> And for the actual question you have -- I don't have a good solution.
<offby1> ah :-(
<offby1> and here I was about to buy you six months' of diaper service.
<offby1> have you at least encountered this sort of problem before?
<offby1> I'll take commiseration if I can't get advice :-)                                [07:49]
<elibarzilay> One option is to create the super-struct firs, and then create a more specific one
              in a functional way.
<offby1> e.g.?
<offby1> can't picture that
<elibarzilay> (define foo (make-point 1 2))
<offby1> uh huh
<elibarzilay> and later on -- (make-colored-point (point-x foo) (point-y foo) "blue")     [07:50]
<offby1> sure, I can do that
<elibarzilay> The only difference is that you don't get the change destructively.
<offby1> but that seems tedious because it requires that I spell out an accessor for every field
         in the super-struct
<elibarzilay> (Which would be a good thing.)
<elibarzilay> With some macros that should not be a problem.
<offby1> I was hoping I could do something like (make-colored-point (all-fields-from foo)
         "blue")                                                                          [07:51]
<offby1> to my surprise there is no built-in way to copy structures
<elibarzilay> BTW, CLOS (not Swindle) can change the class of an object destructively.  I think
              I added something similar to Swindle, but it's ugly anyway.
<offby1> oh
<offby1> I guess that's sorta what I wanted.  And I wouldn't mind the ugliness, since it
         wouldn't be _my_ ugliness :-)                                                    [07:52]
<elibarzilay> Doing what you want should be easy.
<offby1> can't imagine how, though
<elibarzilay> just a second.
<offby1> thanks!
* offby1 resumes researching diaper services
<elibarzilay> BTW, before I continue that side-hacking -- you can also make a `union' struct --
              with a field that can have one of several additional infos.                 [07:54]
<elibarzilay> That would be the clean approach, I think.  (Clean for code, not clean for the
              structs which won't look nicer.)
<offby1> hmm                                                                              [07:55]
<elibarzilay> Something like (define foo (make-point 1 2)) --> with an automatic `extra' field
              that gets initialized to #f
<offby1> hmm hmm hmm
<elibarzilay> And later: (set-point-extra! foo '(colored "blue"))
<elibarzilay> And (define (point-color p) ...verify-color-extra... (cadr (point-extra p)))
                                                                                          [07:56]
<offby1> and rather than having a bunch of distinct structure types,I have just one type, but I
         keep the CTCP? et al functions; I just rewrite them to examine those extra fields
<elibarzilay> Yes.
<offby1> there's an idea; thanks.
<elibarzilay> The natural thing to do with this is to keep the extra field as an alist of
              additional information.                                                     [07:57]
<offby1> that does sound a lot cleaner.
<elibarzilay> Then you can hang whatever you want there.
<offby1> sort of commentary on the other fields.
<elibarzilay> Yes.
<offby1> thanks, Baroque-Code Repair Man!                                                 [07:58]
<offby1> If it ain't Baroque, don't fix it!
<elibarzilay> Back to the side hack.                                                      [07:59]
<elibarzilay> It'll take me a minute.
<elibarzilay> (Possibly more -- my laptop's battery is about done.)
<lisppaste> elibarzilay annotated #46013 with "making sub-structs" at
            http://paste.lisp.org/display/46013#2                                         [08:04]
<elibarzilay> There.
<elibarzilay> It should also be possible to make this code more robust:
<elibarzilay> Use `struct-info' to verify that you get a struct type that is a sub-type of the
              original one, etc.                                                          [08:05]
<elibarzilay> offby1: I recommend pampers.                                                [08:06]
<offby1> aaaahhh!!! very clever
<offby1> (the sub-struct hack; not the recommendation for Pampers)
<offby1> we likee                                                                         [08:07]
<offby1> see, this is what I pay you for.
<offby1> for some value of "pay".
ERC> 

> (define (make-sub-struct x sub-constructor . more-args)
    (apply sub-constructor
           (append (cdr (vector->list (struct->vector x)))
                   more-args)))
> (define-struct point (x y) #f)
> (define-struct (colored-point point) (color) #f)
> (define foo (make-point 1 2))
> (make-sub-struct foo make-colored-point "blue")
#4(struct:colored-point 1 2 "blue")
