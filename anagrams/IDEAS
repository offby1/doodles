-*- outline -*-

A grab bag of ideas that are applicable to all the implementations,
but probably appear only in some.

* Treat 'y' as a vowel!!

That way we don't omit "dry", "my", "cry" ...

* Don't list all anagrams -- use "delay"

Rather than listing all the anagrams, instead just list the words that
can be made from the bag, and next to each word, provide a thunk which
will generate the remaining anagrams.  This should save a lot of time
if you're just looking for funny anagrams -- you'll get a list of
perhaps 100 words that can be made from the bag; you'll choose one,
the thunk will run, and you start over.

* Use a simple string of sorted letters as the bag.

This isn't necessarily better than any other method for all
implementations, but it seems the best for Perl 5, since it can be
used as a hash key (convenient when reading the dictionary).  And
anyway, subtracting two such things ought to be fast, assuming that
substr is fast.

And yet I tried this first when writing the C++ version.  It worked
OK, but I then tried using bignums ... and they were twice as fast.
Hmm.

* Look in more than one place for the dictionary.

I've only tried the programs on a few computers, and yet each has the
dictionary in a different place.  Windows is of course particularly
bad.

* Languages to do

** perl6

** tcl !

* Apply the pruning optimization that I did in r2173 to other implementations.

* Factor out common Scheme code.

This is probably much harder than it should be, because I really mean
"write one program which will work in all the scheme implementations".
Writing portable Scheme is hard (and, as I repeatedly proclaim on IRC,
not worth the effort).  Let's go shopping.
