* Find a string and a dictionary that are the right size: the
  algorithm will find all the anagrams fast enough that I won't get
  bored, but slowly enough so that the profile statistics are
  meaningful.

* instead of storing the dictionary as a simple list of words, store
  it as a list of bags.  No two bags would be "the same", i.e., no
  two would have the same number of each letter (e.g., "abbbc" is the
  same bag as "cbbab" -- both are 1 a, 3 bs, and a c).  "Attached" to
  each bag would be a list of words that can be made from the bag,
  with no leftover letters.  So for example:

  a:1 c:1 t:1 -> cat, act
  a:1 c:1 e:1 m:1 -> came, mace

  Dunno if this will make it faster, but that's what optimization is
  all about ...
