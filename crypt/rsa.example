;; -*-scheme-*-
;; p = 7
;; q = 11
;; phi = 60
;; n = 77
;; e = 3
;; 
;; encrypt (x)

(require 'primes)
(require 'modular)

(define-macro (cons-stream a b)
  `(cons ,a (delay ,b)))

(define (stream-car stream) (car stream))
(define (stream-cdr stream) (force (cdr stream)))
(define stream-null? null?)

(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
    (stream-ref (stream-cdr s) (- n 1))))

(define (stream-map proc s)
  (if (stream-null? s)
      the-empty-stream
    (cons-stream (proc (stream-car s))
                 (stream-map proc (stream-cdr s)))))

(define (stream-for-each proc s)
  (if (stream-null? s)
      'done
    (begin (proc (stream-car s))
           (stream-for-each proc (stream-cdr s)))))

(define (display-stream s)
  (stream-for-each display-line s))

(define (display-line x)
  (newline)
  (display x))



;; stream-car and stream-cdr would normally be built into
;;  the stream implementation

                                        ;: (stream-car
                                        ;:  (stream-cdr
                                        ;:   (stream-filter prime?
                                        ;:                  (stream-enumerate-interval 10000 1000000))))

(define (stream-enumerate-interval low high)
  (if (> low high)
      the-empty-stream
    (cons-stream
     low
     (stream-enumerate-interval (+ low 1) high))))

(define (stream-filter pred stream)
  (cond ((stream-null? stream) the-empty-stream)
        ((pred (stream-car stream))
         (cons-stream (stream-car stream)
                      (stream-filter pred
                                     (stream-cdr stream))))
        (else (stream-filter pred (stream-cdr stream)))))

(define (integers-starting-from n)
  (cons-stream n (integers-starting-from (+ n 1))))

(define primes
  (cons-stream
   2
   (stream-filter prime? (integers-starting-from 3))))

(stream-map 
 (lambda (p)
   (stream-map 
    (lambda (q)
      (stream-map
       (lambda (e)
         (stream-filter (lambda (x)
                          (< x (min p q)))
                        primes))
       primes))
    primes)) 
 primes)

(lambda (p q e)
  (let ((phi (* (- p 1)
                (- q 1))))
    (modular:invertable? phi e)))