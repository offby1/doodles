;; 13 Oct 1998 I'm trying to learn about macros and syntax in Guile.
;; Unfortunately, they're not documented, so I have to figure it out
;; for myself ... so far I've investigated `procedure->macro' and
;; `defmacro', and sort of understand them.  `procedure->macro'
;; returns a macro which, when invoked, calls its argument, a
;; procedure of two arguments, passing it the text with which it was
;; invoked, and some sort of environment.  `defmacro' I don't
;; understand, although I'm able to write a macro by copying
;; examples...

;; As practice, here's my attempt at `fluid-let'.

;;; (fluid-let ((VAR0 EXPR0)
;;;             (VAR1 EXPR1)
;;;             ...)
;;;   ACTION ...)
;;; 
;;; =>
;;; 
;;; (let ((%%gensym0 VAR0)
;;;       (%%gensym1 VAR1)
;;;       ...)
;;;   (dynamic-wind
;;;    (lambda ()
;;;      (set! VAR0 EXPR0)
;;;      (set! VAR1 EXPR1)
;;;      ...)
;;;    (lambda ()
;;;      ACTION ...)
;;;    (lambda ()
;;;      (set! VAR0 %%gensym0)
;;;      (set! VAR1 %%gensym1)
;;;      ...)))
;;; 

;; This uses gensym, but I'm not sure that that's the Right Thing.  I
;; can't precisely describe why I think it's wrong, but I fear that if
;; someone invokes `fluid-let', and passes it symbols that look like
;; those generated by `gensym', then something awful will happen.

(defmacro fluid-let (bindings . body)
  (let* (
         ;; (%%gensym0 %%gensym1 ...)

         ;; One generated symbol for each element in the
         ;; binding-list of the fluid-let.
         (list-of-generated-symbols
          (map (lambda (dummy)
                 (gensym))
               (vector->list (make-vector (length bindings)))))

         ;; ((%%gensym0 VAR0)
         ;;  (%%gensym1 VAR1)
         ;;  ...)
         (list-of-gensym-inits
          (map (lambda (init gensym)
                 (list gensym (car init)))
               bindings
               list-of-generated-symbols))

         ;; ((set! VAR0 EXPR0)
         ;;  (set! VAR1 EXPR1)
         ;;  ...)

         (list-of-var-inits
          (map (lambda (init)
                 (append (list 'set!) init))
               bindings))

         ;; ((set! VAR0 %%gensym0)
         ;;  (set! VAR1 %%gensym1)
         ;;  ...)
            
         (list-of-restorations
          (map (lambda (init gensym)
                 (list 'set! (car init) gensym))
               bindings
               list-of-generated-symbols)))

    `(let ,list-of-gensym-inits
       (dynamic-wind
        (lambda () ,@list-of-var-inits)
        (lambda () ,@body)
        (lambda () ,@list-of-restorations)))))

;; a simple test
(if #f
    (let ((a #f)
          (b #f))
      (for-each display (list "A is " a "; b is " b #\newline))
      (fluid-let ((a 3)
                  (b 4))
        (for-each display (list "Sum of fluid values is " (+ a b) #\newline)))
      (for-each display (list "A is " a "; b is " b #\newline))
      ))
