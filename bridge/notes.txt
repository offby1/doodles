-*-outline-*-
Thoughts about a bridge program based on a "double-dummy solver".

Inspired by http://www.gibware.com/reviews/bw.html, or something like
it.

* What is it?

A double-dummy solver is a function that, given

- north's holding
- east's holding
- south's holding
- west's holding
- which of the four hands makes the opening lead
- the trump suit

figures out the number of tricks that the declarer will take.  It
assumes that all four players play as well as possible.  I'm not
entirely sure what that means, but each player can see each other's
cards (that's why it's called "double-dummy"), so there shouldn't be
too much ambiguity.

** open questions

However, here are some things that are nevertheless uncertain:

*** Which card to play

When faced with a choice of two cards to play, both of which will
clearly win, which should it choose?  Perhaps it should, say, always
play the higher, on the assumption that that will communicate
something useful to partner.

    On second thought, though, that's silly; there's nothing to
    communicate, since each player can see everything.  Therefore I
    now proclaim: it doesn't matter.

Similarly, when faced with a choice of two cards to play, both of
which will clearly _lose_, which should it choose?

Related to the first question: when the two cards will both clearly
win, but one of them will cause the trick to be won by me, and the
other by my partner, which should it choose?

    I suspect that the idea of unblocking a suit (i.e., playing the
    high card from the short suit first, as they taught us in beginner
    class) is relevant here.

Is there ever a case when it should play a losing card, despite
holding a winning card?  (This is called "ducking":
http://en.wikipedia.org/wiki/Duck_%28bridge%29)

    Yes: that's why defenders "hold up" at notrump.
    http://en.wikipedia.org/wiki/Holdup_%28bridge%29 Obviously, losing
    that trick now only makes sense if the tactic gains me _two_ or
    more otherwise unavailable tricks.

Is there ever a case where it's not clear whether a particular card
would win?

      Presumably, yes: when the opponents might duck.

So it's clear that writing such a function wouldn't be trivial,
although it might not be terribly hard.  I'm also hoping it would run
quickly.

*** Is it clear which is the winning card?

Above I referred to "[cards] which will clearly win".  I am not sure
that it will be obvious.

    On the other hand, if the player who's leading can see that his
    card is the highest of the suit, and the opponents hold no trumps,
    that ain't rocket science.

*** Which card to discard?

* How would you use it?

** Bidding

For each possible call that is legal for me, predict the score that
will result if I make it, and then pick the call that yields the
biggest score.

Brute force indeed!

Now imagine a function that takes a possibly-incomplete auction, and
returns a score.  Now, how does one write this function?  Well,
there's one case that's really easy: when the auction is complete, and
we thus are certain who the declarer will be (or, perhaps, that the
hand was passed out), and what the contract will be.  In that case, we
simply call the function that maps _completed_ auctions to scores,
passing our incomplete auction with our "pass" appended.

    How to run predict the score from a completed auction:

    Run our double-dummy solver a bunch of times, and pick the most
    likely result, and score that.

    But -- how do we run the double-dummy solver, when we don't know
    the contents of the other three hands?  Answer: we _guess_.  We
    accumulate partial knowledge of those hands, from the auction; and
    then we deal a random hand that doesn't contradict that partial
    knowledge.
 
In the (more common) case of an _incomplete_ auction, we'd

-posit some call.  That is, we simply pick one legal call.

-call ourselves recursively, with the "extended auction" -- just the
 auction we were passed, with the posited call tacked onto the end

Naturally we'd do this for _every_ legal call, or at least, some of
them (doing them all would almost certainly take too long, alas), and
return the score that comes up the most, or the average score, or
something.

** Playing

Probably similar to bidding: for each card that it's legal for me to
play, see what the score would be if I _did_ play it, and choose the
card with the highest score.

How does one predict the score, given a card and a game-so-far?

The easy case: this is the last card of the hand.  In that case, we
know the actual number of tricks taken by the declarer, so we can just
figure out the score.

The recursive case: "posit" a legal card, and call ourselves recursively.
 
** How do I represent incomplete knowledge of a hand?

The only thing I've thought of so far is a list of predicates: for
example, if all I know is that the hand has either five or six spades,
I'd construct a function like

    (lambda (hand) (< 4 (count-spades hand) 7))

and add it to a list of such functions.  That list would constitute my
knowledge of the hand.

Such a list might work, but seems crude.  For example, if a list had
the above entry, along with the similar entry

    (lambda (hand) (< 4 (count-spades hand) 8))

it'd sure be nice to be able to recognize that the first is redundant,
but given that the only thing one can do with a function is call it,
this seems difficult.

The right solution is probably a language to describe partial
knowledge of bridge hands ... but that sounds mighty daunting.

* Implementation thoughts

If I really do the brute-force approach outlined above, then it'll be
crucial that I be able to profile the code, since it's likely to do
_lots_ of computation.  Unfortunately Guile as of version 1.7.2 (which
is a prerelease) doesn't seem to have any profiling support whatever.
mzscheme does, and Common Lisp does.  I tend towards Scheme since I
spend less time looking stuff up in the reference.

* Testing

Lots of records of real hands are at
http://www.sarantakos.com/bridge/vugraph.html; if I ever write
something that claims to work, I could compare its results to those.

* Ideas

** search strategies

http://www.aaai.org/AITopics/html/seachreason.html
