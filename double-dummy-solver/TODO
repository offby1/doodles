-*- outline -*-

* make it smarter!

There are a lot of things we could do to improve the play, without
resorting to lookahead:

** unblock

See the comment on r2954

** try for finesses

I think that would require "cooperation" from both first and third
seats: first seat would have to lead low, even if he'd otherwise lead
high; third seat would have to play the lower card.

Although, since third seat can see all the cards, he'd probably do the
right thing anyway.

* factor out "distinct" code ...

Both tricks and hands are essentially sets: they require that they
never have two of the same card.  Perhaps create a new type that is a
set, and build tricks and hands on top of that.

* find dead code ...

... by using
http://planet.plt-scheme.org/300/docs/clements/no-brainer.plt/1/0/doc.txt
(thanks for the tip, Eli!)

* see if the U of Alberta has any hints

... since they have a games site at http://www.cs.ualberta.ca/~games/,
which mentions hearts and spades

* keep track of the returns from predict-score ...

... and at the end of the hand, see how well it did.  I'd expect the
predictions from the beginning of the hand to be wild, but as the hand
progresses, they'd close in on accurate ... sort of the way Firefox's
file-download progress bar predicts how long it'll take to finish.

** measure the cost/benefit of "predict-score" and max-lookahead

The cost of course is the time it takes.  Hard to measure usefully,
since CPU time depends on ... the CPU.  Perhaps I could measure some
sort of fundamental unit, like the function that determines which of
four cards in a trick wins.

The benefit is the amount of information returned.  If we call it on
three cards, and it returns the same score for each, then we'll assume
that the benefit was 0, since we could have guessed that.  (That's not
quite a valid assumption -- the cards might in fact _be_ of equal
value; but often they're not).  So we could estimate the benefit by

        number of distinct scores returned - 1
        ----------------------------------
        number of times called - 1

I suspect this ratio will drop as max-lookahead rises.

** consider abandoning lookahead entirely!

It's slow, of course; and if the ultimate goal here is to use this
solver as part of a real bridge playing program, it's _too_ slow.  And
I haven't noticed that lookahead improves the results much.

* have deck.ss get max-lookahead from the command line

... rather than hard-coding it
