-*- outline -*-

* parallelize!

Maybe termite (http://toute.ca) will let me predict scores from two
cards at once.

* take command-line args 

... to control things like

** fancy UTF-8 suit characters, versus 's h d c'

** diagnostic messages

** profiling

* save hand summaries

For testing, for each hand, write out

** the entire deal, or perhaps just the random seed that generated it

** the parameters that affect the play:

*** max-lookahead

** the resulting history, or perhaps just the count of tricks won

If we do this regularly, then we can quickly see if a code change
causes those things to change, by comparing the current run to a
previous run.

Perhaps the saved file should include a serial number, or a timestamp,
or something, to ensure that newer ones don't clobber older ones.

* make it smarter!

There are a lot of things we could do to improve the play, without
resorting to lookahead:

** unblock

See the comment on r2954

** try for finesses

I think that would require "cooperation" from both first and third
seats: first seat would have to lead low, even if he'd otherwise lead
high; third seat would have to play the lower card.

Although, since third seat can see all the cards, he'd probably do the
right thing anyway.

Maybe we shouldn't try all the time.  Remember, our goal isn't to
"win" (winning is meaningless since we're playing both sides); rather,
it's to predict what good human players would do.  And a good human
player doesn't try for every finesse; rather, he tries for those whose
benefits would exceed their cost.  Further: when there's a finesse
opportunity, there are three possibilties:

*** we don't even try

we win one trick (the high card of the tenace)

*** we try and fail

we lose some number of tricks, depending.  It's possible we'd lose a
shitload, if it's notrump and the enemy has a long suit he can run.

*** we try and win

we win two tricks: both cards in the tenace

A good player will figure his chances of winning, the cost of losing,
and thus the average return on the finesse -- and if that return is
greater than one trick, he'll try it.  We should do likewise.

* factor out "distinct" code ...

Both tricks and hands are essentially sets: they require that they
never have two of the same card.  Perhaps create a new type that is a
set, and build tricks and hands on top of that.

* find dead code ...

... by using
http://planet.plt-scheme.org/300/docs/clements/no-brainer.plt/1/0/doc.txt
(thanks for the tip, Eli!)

* see if the U of Alberta has any hints

... since they have a games site at http://www.cs.ualberta.ca/~games/,
which mentions hearts and spades

* keep track of the returns from predict-score ...

... and at the end of the hand, see how well it did.  I'd expect the
predictions from the beginning of the hand to be wild, but as the hand
progresses, they'd close in on accurate ... sort of the way Firefox's
file-download progress bar predicts how long it'll take to finish.

** measure the cost/benefit of "predict-score" and max-lookahead

The cost of course is the time it takes.  Hard to measure usefully,
since CPU time depends on ... the CPU.  Perhaps I could measure some
sort of fundamental unit, like the function that determines which of
four cards in a trick wins.

The benefit is the amount of information returned.  If we call it on
three cards, and it returns the same score for each, then we'll assume
that the benefit was 0, since we could have guessed that.  (That's not
quite a valid assumption -- the cards might in fact _be_ of equal
value; but often they're not).  So we could estimate the benefit by

        number of distinct scores returned - 1
        ----------------------------------
        number of times called - 1

I suspect this ratio will drop as max-lookahead rises.

** consider abandoning lookahead entirely!

It's slow, of course; and if the ultimate goal here is to use this
solver as part of a real bridge playing program, it's _too_ slow.  And
I haven't noticed that lookahead improves the results much.

* have deck.ss get max-lookahead from the command line

... rather than hard-coding it
